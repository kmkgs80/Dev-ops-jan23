GIT --> version control tool used to keep track of versions of files and directories..

mkdir git_practice
cd git_practice

git init ---> create git repo
(ls -a and make sure .git repo is present)

-------------------------------------------------------
git config --global user.name "abc"
git config --global user.email "abc@gmail.com"
--------------------------------------------------------------------
vi file1

(add two lines )

git status 
(untracked files )

git add file1 --> move files from local repo to staging area or index area 

git status
git commit -m "added file1" ---> this will move files from index area to git repo.

git status
(nothing to commit, working tree clean)

git log ---> shows history of repository

git log -2 --> shows you latest two commits 

git log filename ---> shows you all commits on a file

git log -2 filename ---> latest two commits on a file


vi file1
(add extra few lines to it)

git add file1
git commit -m "modified file1"

git log 
(u can see two commits)

take previous commit ID 

git checkout Prev-Commit-ID ---> used to switch to previous commit or switch to branch or switch to tag

cat file1
(check content of a file)

git checkout master  
(switch to latest commit)

git log 

(u can see all commits)

u can add one more file test and repeat above steps 

=======================================================================
Branch ---> its for parallel development, two people or two team work on the same piece of code for developing different set of features.
and intergrate them by merging.

git branch  ---> list branches

git branch branch1 ---> create branch from checked out branch

git branch branch2 branch1  --> create branch2 from branch1

how to delete branch

git branch -d branchname 

--------------------------------------------------------------------------------
steps to pratice
git branch branch1  ---> create branch1 from master

git checkout branch1 ---> switch to branch1

add neew file in this branch

git checkout master --> go to master branch

git merge branch1  ---> branch1 will get merged to master

create another branch branch2..
modify the same piece of code on two different branches... and try to merge .. 
------------------------------------------------------------------------------------------------------------ 

-------------explain merge conflict--------------- 
Merging Conflict Will occur when the same peace of code is changed on 2 
different branches, when we try to merge those two brnaches, 
then merging conflict will occur,
 To resolve this issue, I donâ€˜t know whose change should I take 
to merge , so I contact developers changes the code, person 
who modified code of branch1 and branch2. Then they will 
decide and tell us whose changes should I take into merge. Then I take that change and I commit it. I get to know who 
modified the code on branch1 and branch2 using git log 
command.
-------------------------------------------------------------------------------------------------------------------------------------------------